// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Deployment.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProductSecretsOperations.
    /// </summary>
    public static partial class ProductSecretsOperationsExtensions
    {
            /// <summary>
            /// Returns an array of product secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            public static IPage<ProductSecret> List(this IProductSecretsOperations operations, string productId)
            {
                return operations.ListAsync(productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an array of product secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductSecret>> ListAsync(this IProductSecretsOperations operations, string productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(productId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specific product secret details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            public static ProductSecret Get(this IProductSecretsOperations operations, string productId, string secretName)
            {
                return operations.GetAsync(productId, secretName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specific product secret details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductSecret> GetAsync(this IProductSecretsOperations operations, string productId, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(productId, secretName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a product secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='secretParameters'>
            /// The parameters required for creating/updating a product secret.
            /// </param>
            public static void Import(this IProductSecretsOperations operations, string productId, string secretName, SecretParameters secretParameters)
            {
                operations.ImportAsync(productId, secretName, secretParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a product secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='secretParameters'>
            /// The parameters required for creating/updating a product secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ImportAsync(this IProductSecretsOperations operations, string productId, string secretName, SecretParameters secretParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ImportWithHttpMessagesAsync(productId, secretName, secretParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a product secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='secretParameters'>
            /// The parameters required for creating/updating a product secret.
            /// </param>
            public static void Validate(this IProductSecretsOperations operations, string productId, string secretName, SecretParameters secretParameters)
            {
                operations.ValidateAsync(productId, secretName, secretParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a product secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='secretParameters'>
            /// The parameters required for creating/updating a product secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ValidateAsync(this IProductSecretsOperations operations, string productId, string secretName, SecretParameters secretParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ValidateWithHttpMessagesAsync(productId, secretName, secretParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a product secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='secretParameters'>
            /// The parameters required for creating/updating a product secret.
            /// </param>
            public static void BeginImport(this IProductSecretsOperations operations, string productId, string secretName, SecretParameters secretParameters)
            {
                operations.BeginImportAsync(productId, secretName, secretParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a product secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='secretParameters'>
            /// The parameters required for creating/updating a product secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginImportAsync(this IProductSecretsOperations operations, string productId, string secretName, SecretParameters secretParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginImportWithHttpMessagesAsync(productId, secretName, secretParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a product secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='secretParameters'>
            /// The parameters required for creating/updating a product secret.
            /// </param>
            public static void BeginValidate(this IProductSecretsOperations operations, string productId, string secretName, SecretParameters secretParameters)
            {
                operations.BeginValidateAsync(productId, secretName, secretParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a product secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='secretName'>
            /// The secret name.
            /// </param>
            /// <param name='secretParameters'>
            /// The parameters required for creating/updating a product secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginValidateAsync(this IProductSecretsOperations operations, string productId, string secretName, SecretParameters secretParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginValidateWithHttpMessagesAsync(productId, secretName, secretParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns an array of product secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProductSecret> ListNext(this IProductSecretsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an array of product secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProductSecret>> ListNextAsync(this IProductSecretsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
