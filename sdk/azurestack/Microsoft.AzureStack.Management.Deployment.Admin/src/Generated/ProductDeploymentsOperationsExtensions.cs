// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Deployment.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProductDeploymentsOperations.
    /// </summary>
    public static partial class ProductDeploymentsOperationsExtensions
    {
            /// <summary>
            /// Invokes bootstrap action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='version'>
            /// Generic Version object
            /// </param>
            public static void BootStrap(this IProductDeploymentsOperations operations, string productId, string version = default(string))
            {
                operations.BootStrapAsync(productId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invokes bootstrap action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='version'>
            /// Generic Version object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BootStrapAsync(this IProductDeploymentsOperations operations, string productId, string version = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BootStrapWithHttpMessagesAsync(productId, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invokes deploy action on the product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='deployActionParameter'>
            /// Represents bootstrap action parameter
            /// </param>
            public static void Deploy(this IProductDeploymentsOperations operations, string productId, DeployActionParameters deployActionParameter)
            {
                operations.DeployAsync(productId, deployActionParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invokes deploy action on the product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='deployActionParameter'>
            /// Represents bootstrap action parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeployAsync(this IProductDeploymentsOperations operations, string productId, DeployActionParameters deployActionParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeployWithHttpMessagesAsync(productId, deployActionParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invokes remove action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            public static void Remove(this IProductDeploymentsOperations operations, string productId)
            {
                operations.RemoveAsync(productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invokes remove action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this IProductDeploymentsOperations operations, string productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWithHttpMessagesAsync(productId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invokes rotate secrets action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            public static void RotateSecrets(this IProductDeploymentsOperations operations, string productId)
            {
                operations.RotateSecretsAsync(productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invokes rotate secrets action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RotateSecretsAsync(this IProductDeploymentsOperations operations, string productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RotateSecretsWithHttpMessagesAsync(productId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unlocks the product subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='duration'>
            /// Duration in TimeSpan format(Define which ISO format)
            /// </param>
            public static void Unlock(this IProductDeploymentsOperations operations, string productId, string duration = default(string))
            {
                operations.UnlockAsync(productId, duration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unlocks the product subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='duration'>
            /// Duration in TimeSpan format(Define which ISO format)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnlockAsync(this IProductDeploymentsOperations operations, string productId, string duration = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnlockWithHttpMessagesAsync(productId, duration, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// locks the product subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            public static void LockOperation(this IProductDeploymentsOperations operations, string productId)
            {
                operations.LockOperationAsync(productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// locks the product subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LockOperationAsync(this IProductDeploymentsOperations operations, string productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LockOperationWithHttpMessagesAsync(productId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invokes bootstrap action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='version'>
            /// Generic Version object
            /// </param>
            public static void BeginBootStrap(this IProductDeploymentsOperations operations, string productId, string version = default(string))
            {
                operations.BeginBootStrapAsync(productId, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invokes bootstrap action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='version'>
            /// Generic Version object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginBootStrapAsync(this IProductDeploymentsOperations operations, string productId, string version = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginBootStrapWithHttpMessagesAsync(productId, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invokes deploy action on the product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='deployActionParameter'>
            /// Represents bootstrap action parameter
            /// </param>
            public static void BeginDeploy(this IProductDeploymentsOperations operations, string productId, DeployActionParameters deployActionParameter)
            {
                operations.BeginDeployAsync(productId, deployActionParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invokes deploy action on the product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='deployActionParameter'>
            /// Represents bootstrap action parameter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeployAsync(this IProductDeploymentsOperations operations, string productId, DeployActionParameters deployActionParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeployWithHttpMessagesAsync(productId, deployActionParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invokes remove action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            public static void BeginRemove(this IProductDeploymentsOperations operations, string productId)
            {
                operations.BeginRemoveAsync(productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invokes remove action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRemoveAsync(this IProductDeploymentsOperations operations, string productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRemoveWithHttpMessagesAsync(productId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Invokes rotate secrets action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            public static void BeginRotateSecrets(this IProductDeploymentsOperations operations, string productId)
            {
                operations.BeginRotateSecretsAsync(productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invokes rotate secrets action on the product deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRotateSecretsAsync(this IProductDeploymentsOperations operations, string productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRotateSecretsWithHttpMessagesAsync(productId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
