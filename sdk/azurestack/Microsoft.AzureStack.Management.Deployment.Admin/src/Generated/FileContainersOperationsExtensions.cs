// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Deployment.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FileContainersOperations.
    /// </summary>
    public static partial class FileContainersOperationsExtensions
    {
            /// <summary>
            /// Returns an array of file containers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<FileContainer> List(this IFileContainersOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an array of file containers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FileContainer>> ListAsync(this IFileContainersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the specific file container details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileContainerId'>
            /// The file container identifier.
            /// </param>
            public static FileContainer Get(this IFileContainersOperations operations, string fileContainerId)
            {
                return operations.GetAsync(fileContainerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the specific file container details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileContainerId'>
            /// The file container identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileContainer> GetAsync(this IFileContainersOperations operations, string fileContainerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fileContainerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new file container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileContainerParameters'>
            /// The parameters required to create a new file container.
            /// </param>
            /// <param name='fileContainerId'>
            /// The file container identifier.
            /// </param>
            public static FileContainer Create(this IFileContainersOperations operations, FileContainerParameters fileContainerParameters, string fileContainerId)
            {
                return operations.CreateAsync(fileContainerParameters, fileContainerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new file container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileContainerParameters'>
            /// The parameters required to create a new file container.
            /// </param>
            /// <param name='fileContainerId'>
            /// The file container identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileContainer> CreateAsync(this IFileContainersOperations operations, FileContainerParameters fileContainerParameters, string fileContainerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fileContainerParameters, fileContainerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes specified file container.
            /// </summary>
            /// <remarks>
            /// Delete an existing file container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileContainerId'>
            /// The file container identifier.
            /// </param>
            public static void Delete(this IFileContainersOperations operations, string fileContainerId)
            {
                operations.DeleteAsync(fileContainerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes specified file container.
            /// </summary>
            /// <remarks>
            /// Delete an existing file container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileContainerId'>
            /// The file container identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IFileContainersOperations operations, string fileContainerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(fileContainerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new file container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileContainerParameters'>
            /// The parameters required to create a new file container.
            /// </param>
            /// <param name='fileContainerId'>
            /// The file container identifier.
            /// </param>
            public static FileContainer BeginCreate(this IFileContainersOperations operations, FileContainerParameters fileContainerParameters, string fileContainerId)
            {
                return operations.BeginCreateAsync(fileContainerParameters, fileContainerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new file container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileContainerParameters'>
            /// The parameters required to create a new file container.
            /// </param>
            /// <param name='fileContainerId'>
            /// The file container identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileContainer> BeginCreateAsync(this IFileContainersOperations operations, FileContainerParameters fileContainerParameters, string fileContainerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fileContainerParameters, fileContainerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns an array of file containers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<FileContainer> ListNext(this IFileContainersOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns an array of file containers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FileContainer>> ListNextAsync(this IFileContainersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
