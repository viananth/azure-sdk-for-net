// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Update.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UpdateRunsOperations.
    /// </summary>
    public static partial class UpdateRunsOperationsExtensions
    {
            /// <summary>
            /// Get the list of update runs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='update'>
            /// Name of the update.
            /// </param>
            public static IPage<UpdateRun> List(this IUpdateRunsOperations operations, string resourceGroup, string updateLocation, string update)
            {
                return operations.ListAsync(resourceGroup, updateLocation, update).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of update runs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='update'>
            /// Name of the update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UpdateRun>> ListAsync(this IUpdateRunsOperations operations, string resourceGroup, string updateLocation, string update, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroup, updateLocation, update, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of update locations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='update'>
            /// Name of the update.
            /// </param>
            /// <param name='runId'>
            /// Update run identifier.
            /// </param>
            public static UpdateRun Get(this IUpdateRunsOperations operations, string resourceGroup, string updateLocation, string update, string runId)
            {
                return operations.GetAsync(resourceGroup, updateLocation, update, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of update locations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='update'>
            /// Name of the update.
            /// </param>
            /// <param name='runId'>
            /// Update run identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateRun> GetAsync(this IUpdateRunsOperations operations, string resourceGroup, string updateLocation, string update, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroup, updateLocation, update, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific update version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='update'>
            /// Name of the update.
            /// </param>
            /// <param name='runId'>
            /// Update run identifier.
            /// </param>
            public static void Rerun(this IUpdateRunsOperations operations, string resourceGroup, string updateLocation, string update, string runId)
            {
                operations.RerunAsync(resourceGroup, updateLocation, update, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific update version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='update'>
            /// Name of the update.
            /// </param>
            /// <param name='runId'>
            /// Update run identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RerunAsync(this IUpdateRunsOperations operations, string resourceGroup, string updateLocation, string update, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RerunWithHttpMessagesAsync(resourceGroup, updateLocation, update, runId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a specific update version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='update'>
            /// Name of the update.
            /// </param>
            /// <param name='runId'>
            /// Update run identifier.
            /// </param>
            public static void BeginRerun(this IUpdateRunsOperations operations, string resourceGroup, string updateLocation, string update, string runId)
            {
                operations.BeginRerunAsync(resourceGroup, updateLocation, update, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific update version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='updateLocation'>
            /// The name of the update location.
            /// </param>
            /// <param name='update'>
            /// Name of the update.
            /// </param>
            /// <param name='runId'>
            /// Update run identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRerunAsync(this IUpdateRunsOperations operations, string resourceGroup, string updateLocation, string update, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRerunWithHttpMessagesAsync(resourceGroup, updateLocation, update, runId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of update runs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<UpdateRun> ListNext(this IUpdateRunsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of update runs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UpdateRun>> ListNextAsync(this IUpdateRunsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
