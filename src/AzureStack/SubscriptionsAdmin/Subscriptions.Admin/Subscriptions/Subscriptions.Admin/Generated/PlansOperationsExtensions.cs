// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Subscriptions.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PlansOperations.
    /// </summary>
    public static partial class PlansOperationsExtensions
    {
            /// <summary>
            /// List all plans across all subscriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Plan> ListAll(this IPlansOperations operations)
            {
                return operations.ListAllAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all plans across all subscriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Plan>> ListAllAsync(this IPlansOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            public static IPage<Plan> List(this IPlansOperations operations, string resourceGroup)
            {
                return operations.ListAsync(resourceGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Plan>> ListAsync(this IPlansOperations operations, string resourceGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            public static Plan Get(this IPlansOperations operations, string resourceGroup, string plan)
            {
                return operations.GetAsync(resourceGroup, plan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Plan> GetAsync(this IPlansOperations operations, string resourceGroup, string plan, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroup, plan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            /// <param name='newPlan'>
            /// New plan.
            /// </param>
            public static Plan CreateOrUpdate(this IPlansOperations operations, string resourceGroup, string plan, Plan newPlan)
            {
                return operations.CreateOrUpdateAsync(resourceGroup, plan, newPlan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            /// <param name='newPlan'>
            /// New plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Plan> CreateOrUpdateAsync(this IPlansOperations operations, string resourceGroup, string plan, Plan newPlan, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroup, plan, newPlan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            public static void Delete(this IPlansOperations operations, string resourceGroup, string plan)
            {
                operations.DeleteAsync(resourceGroup, plan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPlansOperations operations, string resourceGroup, string plan, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroup, plan, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            public static MetricList ListMetrics(this IPlansOperations operations, string resourceGroup, string plan)
            {
                return operations.ListMetricsAsync(resourceGroup, plan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricList> ListMetricsAsync(this IPlansOperations operations, string resourceGroup, string plan, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsWithHttpMessagesAsync(resourceGroup, plan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            public static MetricDefinitionList ListMetricDefinitions(this IPlansOperations operations, string resourceGroup, string plan)
            {
                return operations.ListMetricDefinitionsAsync(resourceGroup, plan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group the resource is located under.
            /// </param>
            /// <param name='plan'>
            /// Name of the plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinitionList> ListMetricDefinitionsAsync(this IPlansOperations operations, string resourceGroup, string plan, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsWithHttpMessagesAsync(resourceGroup, plan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all plans across all subscriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Plan> ListAllNext(this IPlansOperations operations, string nextPageLink)
            {
                return operations.ListAllNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all plans across all subscriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Plan>> ListAllNextAsync(this IPlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Plan> ListNext(this IPlansOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Plan>> ListNextAsync(this IPlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
